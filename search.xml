<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis持久化</title>
    <url>/2020/12/25/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h3 id="Redis持久化RDB和AOF"><a href="#Redis持久化RDB和AOF" class="headerlink" title="Redis持久化RDB和AOF"></a>Redis持久化RDB和AOF</h3><p>​    Redis性能好，读写快，单线程，是一个内存型数据库，Nosql非关系型数据库</p>
<pre><code>RDB——数据快照
Redis可以加载RDB文件，将数据从磁盘读取到数据库Redis中。
Redis目录中有一个dump.rdb文件，是一个二进制文件。
在Redis中，自动保存RDB是默认开启的。
RDB优缺点：
(1)优点：
1.RDB是某一个时间节点的快照，是一个紧凑的单文件，更多用于数据备份。
2.单文件容易传输到远程服务器做故障恢复
3.RDB可以子进程Fork进行持久化，使Redis更好处理用户请求
4.在大量数据情况下，RDB比AOF更快加载
(2)缺点：
1.如果Redis不及时保存RDB文件，会造成数据的丢失
2.RDB经常需要使用子进程Fork，而Fork操作会消耗大量CPU资源

AOF——日志追加
AOF相当于一个操作的日志记录，默认是关闭的，在redis.conf中配置开启，会看到appendonly.aof文件
缺点会导致文件数据冗余，可进行日志重写。
(1)优点：
1.AOF可以设置完全不同步，每秒同步，每次操作同步，默认每秒同步
2.若AOF文件过大，Redis会自动重写AOF文件，消除数据冗余
3.AOF有序保存数据库的所有写入操作，易读易分析。
(2)缺点：
1.相同数据量情况下，AOF文件通常比RDB文件大
2.在大量写入和载入的时候，AOF比RDB文件效率低。

不推荐单独使用AOF，因为AOF对于数据的恢复载入来说，比RDB慢。
AOF和RDB可以一起使用。</code></pre>
]]></content>
      <categories>
        <category>后端 - Redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql练习50题</title>
    <url>/2020/12/25/Sql%E7%BB%83%E4%B9%A050%E9%A2%98/</url>
    <content><![CDATA[<p>– 建表<br>– 学生表<br>CREATE TABLE <code>Student</code>(<br>    <code>s_id</code> VARCHAR(20),<br>    <code>s_name</code> VARCHAR(20) NOT NULL DEFAULT ‘’,<br>    <code>s_birth</code> VARCHAR(20) NOT NULL DEFAULT ‘’,<br>    <code>s_sex</code> VARCHAR(10) NOT NULL DEFAULT ‘’,<br>    PRIMARY KEY(<code>s_id</code>)<br>);<br>– 课程表<br>CREATE TABLE <code>Course</code>(<br>    <code>c_id</code>  VARCHAR(20),<br>    <code>c_name</code> VARCHAR(20) NOT NULL DEFAULT ‘’,<br>    <code>t_id</code> VARCHAR(20) NOT NULL,<br>    PRIMARY KEY(<code>c_id</code>)<br>);<br>– 教师表<br>CREATE TABLE <code>Teacher</code>(<br>    <code>t_id</code> VARCHAR(20),<br>    <code>t_name</code> VARCHAR(20) NOT NULL DEFAULT ‘’,<br>    PRIMARY KEY(<code>t_id</code>)<br>);<br>– 成绩表<br>CREATE TABLE <code>Score</code>(<br>    <code>s_id</code> VARCHAR(20),<br>    <code>c_id</code>  VARCHAR(20),<br>    <code>s_score</code> INT(3),<br>    PRIMARY KEY(<code>s_id</code>,<code>c_id</code>)<br>);<br>– 插入学生表测试数据<br>INSERT INTO Student VALUES(‘01’ , ‘赵雷’ , ‘1990-01-01’ , ‘男’);<br>INSERT INTO Student VALUES(‘02’ , ‘钱电’ , ‘1990-12-21’ , ‘男’);<br>INSERT INTO Student VALUES(‘03’ , ‘孙风’ , ‘1990-05-20’ , ‘男’);<br>INSERT INTO Student VALUES(‘04’ , ‘李云’ , ‘1990-08-06’ , ‘男’);<br>INSERT INTO Student VALUES(‘05’ , ‘周梅’ , ‘1991-12-01’ , ‘女’);<br>INSERT INTO Student VALUES(‘06’ , ‘吴兰’ , ‘1992-03-01’ , ‘女’);<br>INSERT INTO Student VALUES(‘07’ , ‘郑竹’ , ‘1989-07-01’ , ‘女’);<br>INSERT INTO Student VALUES(‘08’ , ‘王菊’ , ‘1990-01-20’ , ‘女’);<br>– 课程表测试数据<br>INSERT INTO Course VALUES(‘01’ , ‘语文’ , ‘02’);<br>INSERT INTO Course VALUES(‘02’ , ‘数学’ , ‘01’);<br>INSERT INTO Course VALUES(‘03’ , ‘英语’ , ‘03’);</p>
<p>– 教师表测试数据<br>INSERT INTO Teacher VALUES(‘01’ , ‘张三’);<br>INSERT INTO Teacher VALUES(‘02’ , ‘李四’);<br>INSERT INTO Teacher VALUES(‘03’ , ‘王五’);</p>
<p>– 成绩表测试数据<br>INSERT INTO Score VALUES(‘01’ , ‘01’ , 80);<br>INSERT INTO Score VALUES(‘01’ , ‘02’ , 90);<br>INSERT INTO Score VALUES(‘01’ , ‘03’ , 99);<br>INSERT INTO Score VALUES(‘02’ , ‘01’ , 70);<br>INSERT INTO Score VALUES(‘02’ , ‘02’ , 60);<br>INSERT INTO Score VALUES(‘02’ , ‘03’ , 80);<br>INSERT INTO Score VALUES(‘03’ , ‘01’ , 80);<br>INSERT INTO Score VALUES(‘03’ , ‘02’ , 80);<br>INSERT INTO Score VALUES(‘03’ , ‘03’ , 80);<br>INSERT INTO Score VALUES(‘04’ , ‘01’ , 50);<br>INSERT INTO Score VALUES(‘04’ , ‘02’ , 30);<br>INSERT INTO Score VALUES(‘04’ , ‘03’ , 20);<br>INSERT INTO Score VALUES(‘05’ , ‘01’ , 76);<br>INSERT INTO Score VALUES(‘05’ , ‘02’ , 87);<br>INSERT INTO Score VALUES(‘06’ , ‘01’ , 31);<br>INSERT INTO Score VALUES(‘06’ , ‘03’ , 34);<br>INSERT INTO Score VALUES(‘07’ , ‘02’ , 89);<br>INSERT INTO Score VALUES(‘07’ , ‘03’ , 98);</p>
<p>– 1、查询”01”课程比”02”课程成绩高的学生的信息及课程分数<br>SELECT a.*,b.<code>s_score</code> AS 01_score,c.<code>s_score</code> AS 02_score<br>FROM student AS a INNER JOIN score AS b ON b.c_id = ‘01’ AND a.<code>s_id</code>=b.<code>s_id</code><br>INNER JOIN score AS c ON a.<code>s_id</code>=c.<code>s_id</code> AND c.<code>c_id</code>=’02’<br>WHERE b.<code>s_score</code> &gt; c.<code>s_score</code>;</p>
<p>– 2、查询”01”课程比”02”课程成绩低的学生的信息及课程分数<br>SELECT a.*,b.<code>s_score</code> AS 01_score,c.<code>s_score</code> AS 02_score<br>FROM student AS a INNER JOIN score AS b ON b.c_id = ‘01’ AND a.<code>s_id</code>=b.<code>s_id</code><br>INNER JOIN score AS c ON a.<code>s_id</code>=c.<code>s_id</code> AND c.<code>c_id</code>=’02’<br>WHERE b.<code>s_score</code> &lt; c.<code>s_score</code>;</p>
<p>– 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩<br>SELECT a.<code>s_id</code>,a.<code>s_name</code>,AVG(b.<code>s_score</code>)<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code>,a.<code>s_name</code> HAVING AVG(b.<code>s_score</code>) &gt;= 60;</p>
<p>– 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩<br>SELECT a.<code>s_id</code>,a.<code>s_name</code>,AVG(b.<code>s_score</code>)<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code>,a.<code>s_name</code> HAVING AVG(b.<code>s_score</code>) &lt;= 60;</p>
<p>– 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩<br>SELECT a.<code>s_id</code> AS 学生编号,a.<code>s_name</code> AS 学生姓名,COUNT(b.<code>c_id</code>) AS 选课总数,SUM(b.<code>s_score</code>) AS 所有课程的总成绩<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code>,a.<code>s_name</code>;</p>
<p>– 6、查询”李”姓老师的数量<br>SELECT COUNT(t_name) AS 数量<br>FROM teacher<br>WHERE t_name LIKE ‘李%’;</p>
<p>– 7、查询学过”张三”老师授课的同学的信息<br>SELECT d.*<br>FROM teacher AS a INNER JOIN course AS b ON a.<code>t_id</code>=b.<code>t_id</code><br>INNER JOIN score AS c ON b.<code>c_id</code>=c.<code>c_id</code><br>INNER JOIN student AS d ON c.<code>s_id</code>=d.<code>s_id</code><br>WHERE a.<code>t_name</code>=’张三’;</p>
<p>– 8、查询没学过”张三”老师授课的同学的信息<br>SELECT *<br>FROM student<br>WHERE s_id NOT IN (<br>    SELECT d.<code>s_id</code><br>    FROM teacher AS a INNER JOIN course AS b ON a.<code>t_id</code>=b.<code>t_id</code><br>    INNER JOIN score AS c ON b.<code>c_id</code>=c.<code>c_id</code><br>    INNER JOIN student AS d ON c.<code>s_id</code>=d.<code>s_id</code><br>    WHERE a.<code>t_name</code>=’张三’<br>);</p>
<p>– 9、查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息<br>SELECT *<br>FROM student<br>WHERE s_id IN(SELECT a.<code>s_id</code><br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> AND b.<code>c_id</code>=’01’<br>INNER JOIN score AS c ON c.<code>s_id</code>=a.<code>s_id</code> AND c.<code>c_id</code>=’02’)</p>
<p>– 10、查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息<br>SELECT *<br>FROM student<br>WHERE s_id IN(SELECT a.<code>s_id</code><br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> AND b.<code>c_id</code>=’01’)<br>AND s_id NOT IN(SELECT a.<code>s_id</code><br>FROM student AS a INNER JOIN score AS c ON a.<code>s_id</code>=c.<code>s_id</code> AND c.<code>c_id</code>=’02’)</p>
<p>– 11、查询没有学全所有课程的同学的信息<br>– 解法一<br>SELECT *<br>FROM student<br>WHERE s_id NOT IN(<br>    SELECT a.<code>s_id</code><br>    FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> AND b.<code>c_id</code>=’01’<br>    INNER JOIN score AS c ON a.<code>s_id</code>=c.<code>s_id</code> AND c.<code>c_id</code>=’02’<br>    INNER JOIN score AS d ON a.<code>s_id</code>=d.<code>s_id</code> AND d.<code>c_id</code>=’03’<br>)</p>
<p>– 解法二<br>SELECT *<br>FROM student<br>WHERE s_id NOT IN(<br>    SELECT s_id<br>    FROM score<br>    GROUP BY s_id<br>    HAVING COUNT(c_id)=(<br>        SELECT COUNT(DISTINCT c_id) FROM course<br>    )<br>);</p>
<p>– 12、查询至少有一门课与学号为”01”的同学所学相同的同学的信息 *<br>– &lt;&gt;表示不等于<br>– 解法一<br>SELECT *<br>FROM student<br>WHERE s_id IN(<br>    SELECT DISTINCT a.<code>s_id</code><br>    FROM score AS a<br>    WHERE a.<code>c_id</code> IN (<br>        SELECT b.<code>c_id</code><br>        FROM score AS b<br>        WHERE b.<code>s_id</code>=’01’<br>    )<br>    AND a.<code>s_id</code> &lt;&gt; ‘01’<br>);</p>
<p>– 解法二<br>SELECT DISTINCT a.*<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>WHERE b.<code>c_id</code> IN(<br>    SELECT c_id<br>    FROM score<br>    WHERE s_id=’01’<br>)<br>AND b.<code>s_id</code> &lt;&gt; ‘01’;</p>
<p>– 13、查询和”01”号的同学学习的课程完全相同的其他同学的信息<br>SELECT *<br>FROM student<br>WHERE s_id IN(<br>    SELECT s_id<br>    FROM score<br>    GROUP BY s_id<br>    HAVING COUNT(c_id)=(<br>        SELECT COUNT(c_id)<br>        FROM score<br>        WHERE s_id=’01’<br>    )<br>    AND s_id &lt;&gt; ‘01’<br>);</p>
<p>– 14、查询没学过”张三”老师讲授的任一门课程的学生姓名<br>– 解法一<br>SELECT s_name<br>FROM student<br>WHERE s_id NOT IN(<br>    SELECT s_id<br>    FROM score<br>    WHERE c_id=(<br>        SELECT c_id<br>        FROM course<br>        WHERE t_id=(<br>            SELECT t_id<br>            FROM teacher<br>            WHERE t_name=’张三’<br>        )<br>    )<br>);</p>
<p>– 解法二<br>SELECT s_name<br>FROM student<br>WHERE s_id NOT IN(<br>    SELECT a.<code>s_id</code><br>    FROM score AS a INNER JOIN course AS b ON a.<code>c_id</code>=b.<code>c_id</code><br>    INNER JOIN teacher AS c ON b.<code>t_id</code>=c.<code>t_id</code> AND c.<code>t_name</code>=’张三’<br>);</p>
<p>– 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩<br>– 解法一<br>SELECT a.<code>s_id</code>,a.<code>s_name</code>,AVG(b.<code>s_score</code>) AS avg_score<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>WHERE a.<code>s_id</code> IN (<br>    SELECT s_id<br>    FROM score<br>    WHERE s_score &lt;= ‘60’<br>    GROUP BY s_id<br>    HAVING COUNT(s_id) &gt;= ‘2’<br>)<br>GROUP BY a.<code>s_id</code>,a.<code>s_name</code>;</p>
<p>– 解法二<br>SELECT a.<code>s_id</code>,a.<code>s_name</code>,AVG(b.<code>s_score</code>) AS avg_score<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> AND b.<code>s_score</code> &lt;= ‘60’<br>GROUP BY a.<code>s_id</code>,a.<code>s_name</code><br>HAVING COUNT(b.<code>s_score</code>) &gt;= ‘2’;</p>
<p>– 16、检索”01”课程分数小于60，按分数降序排列的学生信息<br>SELECT a.*<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> AND b.<code>c_id</code>=’01’<br>WHERE a.<code>s_id</code> IN (<br>    SELECT s_id<br>    FROM score<br>    WHERE s_score &lt; ‘60’<br>);</p>
<p>– 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩<br>SELECT a.*,<br>    (SELECT s_score FROM score WHERE c_id=’01’ AND s_id=b.<code>s_id</code>) AS 语文,<br>    (SELECT s_score FROM score WHERE c_id=’02’ AND s_id=b.<code>s_id</code>) AS 数学,<br>    (SELECT s_score FROM score WHERE c_id=’03’ AND s_id=b.<code>s_id</code>) AS 英语,<br>    ROUND(AVG(b.<code>s_score</code>),2) AS 平均分<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code><br>ORDER BY ROUND(AVG(b.<code>s_score</code>),2) DESC;</p>
<p>– 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率–及格为&gt;=60，<br>– 中等为：70-80，优良为：80-90，优秀为：&gt;=90<br>SELECT a.<code>c_id</code> AS 课程ID,a.<code>c_name</code> AS 课程name,MAX(b.<code>s_score</code>) AS 最高分,MIN(b.<code>s_score</code>) AS 最低分,AVG(b.<code>s_score</code>) AS 平均分,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> &gt;= ‘60’ THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS 及格率,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> BETWEEN 70 AND 80 THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS 中等率,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> BETWEEN 80 AND 90 THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS 优良率,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> &gt;= ‘90’ THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS 优秀率<br>FROM course AS a INNER JOIN score AS b ON a.<code>c_id</code>=b.<code>c_id</code><br>GROUP BY a.<code>c_id</code>,a.<code>c_name</code>;</p>
<p>– 19、按各科成绩进行排序，并显示排名<br>– 数据库版本过低 无法使用排序函数,百度查询说需要mysql 8.0以上版本,坑爹<br>SELECT s_id, c_id, s_score, dense_rank() over(ORDER BY s_score DESC) AS rank<br>FROM score;</p>
<p>– 20、查询学生的总成绩并进行排名<br>SELECT s_id,SUM(s_score)<br>FROM score<br>GROUP BY s_id<br>ORDER BY SUM(s_score) DESC;</p>
<p>– 21、查询不同老师所教不同课程平均分从高到低显示<br>SELECT a.<code>t_id</code>,AVG(c.<code>s_score</code>)<br>FROM teacher AS a INNER JOIN course AS b ON a.<code>t_id</code>=b.<code>t_id</code><br>INNER JOIN score AS c ON b.<code>c_id</code>=c.<code>c_id</code><br>GROUP BY a.<code>t_id</code><br>ORDER BY AVG(c.<code>s_score</code>) DESC;</p>
<p>– 22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩<br>– limit i,n i=0时可省略 i表示索引，n表示查询条数<br>SELECT a.*,SUM(b.<code>s_score</code>)<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code><br>ORDER BY SUM(b.<code>s_score</code>)<br>LIMIT 1,2;</p>
<p>– 23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比<br>SELECT a.<code>c_id</code> AS 课程编号, a.<code>c_name</code> AS 课程名称,<br>    SUM(CASE WHEN b.<code>s_score</code> BETWEEN 85 AND 100 THEN 1 ELSE 0 END) AS one人数,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> BETWEEN 85 AND 100 THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS one百分比,<br>    SUM(CASE WHEN b.<code>s_score</code> BETWEEN 70 AND 85 THEN 1 ELSE 0 END) AS two人数,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> BETWEEN 70 AND 85 THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS two百分比,<br>    SUM(CASE WHEN b.<code>s_score</code> BETWEEN 60 AND 70 THEN 1 ELSE 0 END) AS three人数,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> BETWEEN 60 AND 70 THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS three百分比,<br>    SUM(CASE WHEN b.<code>s_score</code> &lt; 60 THEN 1 ELSE 0 END) AS four人数,<br>    ROUND(100*(SUM(CASE WHEN b.<code>s_score</code> &lt; 60 THEN 1 ELSE 0 END)/SUM(CASE WHEN b.<code>s_score</code> THEN 1 ELSE 0 END)),2) AS four百分比<br>FROM course AS a INNER JOIN score AS b ON a.<code>c_id</code>=b.<code>c_id</code><br>GROUP BY a.<code>c_id</code>,a.<code>c_name</code>;</p>
<p>– 24、查询学生平均成绩及其名次<br>– mysql 版本过低 不识别rank<br>SELECT s_id,rank() over(ORDER BY AVG(s_score) DESC) AS avg_score<br>FROM score<br>GROUP BY s_id;</p>
<p>– 25、查询各科成绩前三名的记录<br>– union连接查询语句，列值不可重复 union all列值可重复<br>(SELECT * FROM score WHERE c_id=’01’ ORDER BY s_score DESC LIMIT 3)<br>UNION<br>(SELECT * FROM score WHERE c_id=’02’ ORDER BY s_score DESC LIMIT 3)<br>UNION<br>(SELECT * FROM score WHERE c_id=’03’ ORDER BY s_score DESC LIMIT 3);</p>
<p>– 26、查询每门课程被选修的学生数<br>– 聚合函数就要使用group by分组<br>SELECT c_id,COUNT(s_id)<br>FROM score<br>GROUP BY c_id;</p>
<p>– 27、查询出只有两门课程的全部学生的学号和姓名<br>SELECT a.<code>s_id</code> AS 学号,a.<code>s_name</code> AS 姓名<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code><br>HAVING COUNT(b.<code>c_id</code>)=’2’;</p>
<p>– 28、查询男生、女生人数<br>– 解法一<br>SELECT COUNT(s_sex) AS 人数<br>FROM student<br>GROUP BY s_sex;</p>
<p>– 解法二<br>(SELECT s_sex,COUNT(s_sex) FROM student WHERE s_sex=’男’)<br>UNION<br>(SELECT s_sex,COUNT(s_sex) FROM student WHERE s_sex=’女’);</p>
<p>– 29、查询名字中含有”风”字的学生信息<br>SELECT *<br>FROM student<br>WHERE s_name LIKE ‘%风%’;</p>
<p>– 30、查询同名同性学生名单，并统计同名人数<br>SELECT a.<code>s_name</code>,a.<code>s_sex</code>,COUNT(*)<br>FROM student AS a INNER JOIN student AS b ON a.<code>s_id</code> &lt;&gt; b.<code>s_id</code> AND a.<code>s_name</code>=b.<code>s_name</code> AND a.<code>s_sex</code> = b.<code>s_sex</code><br>GROUP BY a.<code>s_name</code>,a.<code>s_sex</code>;</p>
<p>– 31、查询1990年出生的学生名单<br>SELECT * FROM student WHERE s_birth LIKE ‘1990%’;</p>
<p>– 32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列<br>SELECT c_id,AVG(s_score) AS 平均成绩<br>FROM score<br>GROUP BY c_id<br>ORDER BY AVG(s_score) DESC,c_id ASC;</p>
<p>– 33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩<br>SELECT a.<code>s_id</code> AS 学号,a.<code>s_name</code> AS 姓名,AVG(b.<code>s_score</code>) AS 平均成绩<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code>,a.<code>s_name</code><br>HAVING AVG(b.<code>s_score</code>) &gt;= ‘85’;</p>
<p>– 34、查询课程名称为”数学”，且分数低于60的学生姓名和分数<br>SELECT a.<code>s_name</code> AS 学生姓名,b.<code>s_score</code> AS 分数<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> INNER JOIN course AS c ON b.<code>c_id</code>=c.<code>c_id</code> AND c.<code>c_name</code>=’数学’<br>WHERE b.<code>s_score</code> &lt; ‘60’;</p>
<p>– 35、查询所有学生的课程及分数情况；<br>SELECT b.<code>s_id</code>,b.<code>s_score</code>,a.<code>c_name</code>,a.<code>c_id</code><br>FROM course AS a INNER JOIN score AS b ON a.<code>c_id</code>=b.<code>c_id</code>;</p>
<p>– 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数；<br>SELECT a.<code>s_name</code> AS 姓名,c.<code>c_name</code> AS 课程名称,b.<code>s_score</code> AS 分数<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> INNER JOIN course AS c ON b.<code>c_id</code>=c.<code>c_id</code><br>WHERE b.<code>s_score</code> &gt;= ‘70’;</p>
<p>– 37、查询不及格的课程<br>SELECT a.<code>s_name</code> AS 姓名,c.<code>c_name</code> AS 课程名称,b.<code>s_score</code> AS 分数<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> INNER JOIN course AS c ON b.<code>c_id</code>=c.<code>c_id</code><br>WHERE b.<code>s_score</code> &lt; ‘60’;</p>
<p>– 38、查询课程编号为01且课程成绩在80分以上的学生的学号和姓名；<br>SELECT a.<code>s_id</code> AS 学号, a.<code>s_name</code> AS 姓名<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code> AND b.<code>c_id</code>=’01’<br>WHERE b.<code>s_score</code> &gt;= ‘80’;</p>
<p>– 39、求每门课程的学生人数<br>SELECT COUNT(s_id) AS 学生人数<br>FROM score<br>GROUP BY c_id;</p>
<p>– 40、查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩<br>SELECT a.*,MAX(b.<code>s_score</code>)<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>INNER JOIN course AS c ON b.<code>c_id</code>=c.<code>c_id</code><br>INNER JOIN teacher AS d ON c.<code>t_id</code>=d.<code>t_id</code> AND d.<code>t_name</code>=’张三’; </p>
<p>– 41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩<br>SELECT DISTINCT a.<code>s_id</code> AS 学生编号,a.<code>c_id</code> AS 课程编号,a.<code>s_score</code> AS 学生成绩<br>FROM score AS a,score AS b<br>WHERE a.<code>c_id</code> &lt;&gt; b.<code>c_id</code> AND a.<code>s_score</code>=b.<code>s_score</code>;</p>
<p>– 42、查询每门功成绩最好的前两名<br>(SELECT c_id,s_score FROM score WHERE c_id=’01’ ORDER BY s_score DESC LIMIT 2)<br>UNION ALL<br>(SELECT c_id,s_score FROM score WHERE c_id=’02’ ORDER BY s_score DESC LIMIT 2)<br>UNION ALL<br>(SELECT c_id,s_score FROM score WHERE c_id=’03’ ORDER BY s_score DESC LIMIT 2);</p>
<p>– 43、统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列<br>SELECT c_id AS 课程号,COUNT(s_id) AS 选修人数<br>FROM score<br>GROUP BY c_id<br>HAVING COUNT(s_id)&gt;5<br>ORDER BY COUNT(s_id) DESC,c_id ASC;</p>
<p>– 44、检索至少选修两门课程的学生学号<br>SELECT s_id,COUNT(c_id)<br>FROM score<br>GROUP BY s_id<br>HAVING COUNT(c_id) &gt;= ‘2’;</p>
<p>– 45、查询选修了全部课程的学生信息<br>SELECT a.*<br>FROM student AS a INNER JOIN score AS b ON a.<code>s_id</code>=b.<code>s_id</code><br>GROUP BY a.<code>s_id</code><br>HAVING COUNT(c_id) = (SELECT COUNT(c_id) FROM course);</p>
<p>– 46、查询各学生的年龄 按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一<br>– Date_Format() 用不同格式显示日期和时间<br>– Now() 表示返回当前日期和时间<br>– %Y四位  %y二位  %m月值（00-12） %d月的天，数值(0-31)<br>SELECT s_id,s_birth,<br>(DATE_FORMAT(NOW(),’%Y’)-DATE_FORMAT(s_birth,’%Y’)-(CASE WHEN DATE_FORMAT(NOW(),’%m%d’)&gt;DATE_FORMAT(s_birth,’%m%d’) THEN 0 ELSE 1 END)) AS 年龄<br>FROM student;</p>
<p>– 47、查询本周过生日的学生<br>– WEEK表示周<br>SELECT *<br>FROM student<br>WHERE WEEK(DATE_FORMAT(NOW(),’%Y%m%d’))=WEEK(s_birth);</p>
<p>– 48、查询下周过生日的学生<br>SELECT *<br>FROM student<br>WHERE WEEK(DATE_FORMAT(NOW(),’%Y%m%d’))+1=WEEK(s_birth);</p>
<p>– 49、查询本月过生日的学生<br>– MONTH表示月<br>SELECT *<br>FROM student<br>WHERE MONTH(DATE_FORMAT(NOW(),’%Y%m%d’))=MONTH(s_birth);</p>
<p>– 50、查询下月<code>score</code>过生日的学生<br>SELECT *<br>FROM student<br>WHERE MONTH(DATE_FORMAT(NOW(),’%Y%m%d’))+1=MONTH(s_birth);</p>
]]></content>
      <categories>
        <category>后端 - Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>java</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
</search>
